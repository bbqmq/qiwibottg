from aiogram import types
from aiogram.dispatcher import FSMContext
from datetime import datetime
from loader import dp, bot, qiwi
from . import buttons as btns
from . import functions as func
from . import states as st
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

from loader import db, cfg

@dp.message_handler(commands=['start'], state='*')
async def startCommand(message: types.Message, state: FSMContext):
    await state.reset_state()
    user = await db.getUser(message.from_user.id)
    if not(user):
        await db.newUser(message.from_user.id, message.from_user.first_name, message.from_user.username)
    await message.answer(
        f'<b>üíé –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —É–º–Ω—É—é —Ñ–µ—Ä–º—É –∫–∏–≤–∏ –∫–æ—à–µ–ª—å–∫–æ–≤\
        \n\n- –ú–æ–º–µ–Ω—Ç–∞–ª—å–Ω—ã–µ –≤—ã–≤–æ–¥—ã\
        \n- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≤—ã–≤–æ–¥–æ–≤\
        \n- –í—ã–≤–æ–¥ –Ω–∞ –∫–∏–≤–∏ / –ö–∞—Ä—Ç—É\
        \n- –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –¥–æ—Å—Ç—É–ø\
        \n- –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞\
        \n- –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –≤—ã–≤–æ–¥–∞—Ö\
        \n\nüõé –ö–æ–º–∏—Å—Å–∏—è —Ñ–µ—Ä–º—ã</b> - <code>{cfg.commision}</code>%',
        parse_mode='html',
        reply_markup = await btns.start()
    )
    await message.answer(f'<b>–î–µ—Ä–∂–∏ –º–µ–Ω—é</b>', parse_mode='html', reply_markup = btns.mainkb)

@dp.message_handler(text=['üéõ –ú–µ–Ω—é'], state='*')
async def menuKey(message: types.Message, state: FSMContext):
    await state.reset_state()
    user = await db.getUser(message.from_user.id)
    balance = await db.getBalanceTokens(message.from_user.id)
    await message.answer(
        f'<b>‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ñ–µ—Ä–º–æ–π —Ç–æ–∫–µ–Ω–æ–≤:</b>\
        \n\n<b>üí∞ –ë–∞–ª–∞–Ω—Å:</b> <code>{round(balance, 2)}</code> <b>‚ÇΩ</b>\
        \n<b>üîë –¢–æ–∫–µ–Ω–æ–≤:</b> <code>{user.tokensCount}</code>\
        \n\n<b>üí∑ –ú–∏–Ω.–≤—ã–≤–æ–¥:</b> <code>{user.minOutput}.0</code> <b>‚ÇΩ</b>\
        \n<b>üí≥ –†–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –≤—ã–≤–æ–¥–∞:</b> <code>{user.requisites}</code>\
        \n<b>üí£ –ê–≤—Ç–æ–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞:</b> {await func.getColorStatus(user.autoBlock)}\
        \n<b>üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ:</b> {await func.getColorStatus(user.alertBalance)}',
        parse_mode='html',
        reply_markup = await btns.controlKeyboard(alertBalance = user.alertBalance, autoBlock = user.autoBlock)
    )

@dp.callback_query_handler(text='startUse', state='*')
async def startUsingMenu(call: types.CallbackQuery, state: FSMContext):
    await state.reset_state()
    await call.message.edit_text(
        '<b><i>üöÄ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å</i></b>',
        parse_mode='html',
        reply_markup = await btns.main()
    )


@dp.callback_query_handler(text='user&profile', state='*')
async def getUserProfile(call: types.CallbackQuery, state: FSMContext):
    await state.reset_state()
    user = await db.getUser(call.from_user.id)
    balance = await db.getBalanceTokens(call.from_user.id)
    await call.message.edit_text(
        f'<b>üë§ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ:</b>\
        \n\nID: <code>{call.from_user.id}</code>\
        \n–î–Ω–µ–π –≤ –ë–æ—Ç–µ: <b>{user.daysIn}</b>\
        \n–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: <b>{user.regTime}</b>\
        \n\nüìØ –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –≤ –ë–æ—Ç–µ:\
        \n\n–í—ã–≤–æ–¥–æ–≤: {user.logsCount} –Ω–∞ {user.logsSum} <b>‚ÇΩ</b>\
        \n–¢–æ–∫–µ–Ω–æ–≤: <b>{user.tokensCount}</b>\
        \n–ë–∞–ª–∞–Ω—Å –≤—Å–µ—Ö —Ç–æ–∫–µ–Ω–æ–≤: <b>{round(balance, 2)}</b>', 
        parse_mode='html',
        reply_markup=await btns.backMain()
    )

@dp.callback_query_handler(text='user&stats', state='*')
async def getUserStats(call: types.CallbackQuery, state: FSMContext):
    await state.reset_state()
    user = await db.getUser(call.from_user.id)
    balance = await db.getBalanceTokens(call.from_user.id)
    await call.message.edit_text(
        f'<b>üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ñ–µ—Ä–º—ã —Ç–æ–∫–µ–Ω–æ–≤:</b>\
        \n\n–í—ã–≤–æ–¥–æ–≤: <b>{user.logsCount}</b> –Ω–∞ <b>{user.logsSum}‚ÇΩ</b>\
        \n–°–µ–π—á–∞—Å —Ç–æ–∫–µ–Ω–æ–≤: <b>{user.tokensCount}</b>\
        \n–¢–æ–∫–µ–Ω–æ–≤ —Å –¥–æ—Å—Ç—É–ø–æ–º: <b>{user.tokensCount}</b>\
        \n–û–±—â–∏–π –±–∞–ª–∞–Ω—Å —Ç–æ–∫–µ–Ω–æ–≤: <b>{round(balance, 2)}‚ÇΩ</b>\
        \n–ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏: <b>{cfg.sleepChecking} —Å–µ–∫</b>', 
        parse_mode='html',
        reply_markup=await btns.backMain()
    )

@dp.callback_query_handler(text='user&info', state='*')
async def getInfo(call: types.CallbackQuery, state: FSMContext):
    await state.reset_state()
    await call.message.edit_text(
        '<b>üìë –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ:\
        \n\n- –ú–æ–º–µ–Ω—Ç–∞–ª—å–Ω—ã–µ –≤—ã–≤–æ–¥—ã\
        \n- –í—ã–≤–æ–¥–∞ –Ω–∞ –∫–∏–≤–∏ / –∫–∞—Ä—Ç—É\
        \n- –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–æ—Å–ª–µ –≤—ã–≤–æ–¥–∞\
        \n- –ò–∑–º–µ–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞\
        \n- –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –≤—ã–≤–æ–¥–∞—Ö\
        \n- –ò –º–Ω–æ–≥–æ–µ –¥—Ä—É–≥–æ–µ‚Ä¶</b>',
        parse_mode='html',
        reply_markup = await btns.infoKeyboard()
    )


@dp.callback_query_handler(text='user&control', state='*')
async def openUserControlPanel(call: types.CallbackQuery, state: FSMContext):
    await state.reset_state()
    user = await db.getUser(call.from_user.id)
    balance = await db.getBalanceTokens(call.from_user.id)
    await bot.delete_message(chat_id=call.from_user.id, message_id=call.message.message_id)
    await call.message.answer(
        f'<b>‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ñ–µ—Ä–º–æ–π —Ç–æ–∫–µ–Ω–æ–≤:</b>\
        \n\n<b>üí∞ –ë–∞–ª–∞–Ω—Å:</b> <code>{round(balance, 2)}</code> <b>‚ÇΩ</b>\
        \n<b>üîë –¢–æ–∫–µ–Ω–æ–≤:</b> <code>{user.tokensCount}</code>\
        \n\n<b>üí∑ –ú–∏–Ω.–≤—ã–≤–æ–¥:</b> <code>{user.minOutput}.0</code> <b>‚ÇΩ</b>\
        \n<b>üí≥ –†–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –≤—ã–≤–æ–¥–∞:</b> <code>{user.requisites}</code>\
        \n<b>üí£ –ê–≤—Ç–æ–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞:</b> {await func.getColorStatus(user.autoBlock)}\
        \n<b>üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ:</b> {await func.getColorStatus(user.alertBalance)}',
        parse_mode='html',
        reply_markup = await btns.controlKeyboard(alertBalance = user.alertBalance, autoBlock = user.autoBlock)
    )

@dp.callback_query_handler(text_startswith='user&autoBlock&', state='*')
async def changeAutoBlockStatus(call: types.CallbackQuery, state: FSMContext):
    status = int(call.data.split('&')[2])
    await db.updateAutoBlock(call.from_user.id, status)
    await openUserControlPanel(call, state)


@dp.callback_query_handler(text_startswith='user&checkChangeBalance&', state='*')
async def changeAlertBalance(call: types.CallbackQuery, state: FSMContext):
    status = int(call.data.split('&')[2])
    await db.updateAlertBalance(call.from_user.id, status)
    await openUserControlPanel(call, state)

@dp.callback_query_handler(text='user&minOutput', state='*')
async def changeMinOutput(call: types.CallbackQuery, state: FSMContext):
    await state.reset_state()
    await st.ChangeMinOutput.first()
    await call.message.edit_text(
        '<b>üí∑ –í–≤–µ–¥–∏—Ç–µ –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Å—É–º–º—É:</b>', 
        parse_mode='html',
        reply_markup = await btns.backControl()
    )

@dp.message_handler(state=st.ChangeMinOutput.waitSum)
async def setMinOutput(message: types.Message, state: FSMContext):
    try:
        sum = int(message.text)
        if sum < 10:
            await message.answer('<b>‚ö†Ô∏è –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –∞–≤—Ç–æ–≤—ã–≤–æ–¥–∞: </b><code>10</code> <b>‚ÇΩ</b>', parse_mode='html', reply_markup = await btns.backControl())
            return()
        await state.reset_state()
        await db.updateMinOutput(message.from_user.id, sum)
        await message.answer(
            f'<b>üí∑ –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ {sum}‚ÇΩ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.</b>', 
            parse_mode='html',
            reply_markup = await btns.backControl()
        )
    except:
        await message.answer(
            '<b>‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞! \n\nüñá –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É –∏–ª–∏ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –Ω–∞–∑–∞–¥!</b>',
            parse_mode='html',
            reply_markup = await btns.backControl()
        )

@dp.callback_query_handler(text='user&requisites', state='*')
async def updateRequisites(call: types.CallbackQuery, state: FSMContext):
    await state.reset_state()
    await st.UserChangeRequisites.first()
    await call.message.edit_text(
        '<b>üì±–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤–∞—à–µ–≥–æ –∫–æ—à–µ–ª—å–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: \
        \n\n–ü—Ä–∏–º–µ—Ä:</b> <code>79998887733</code>',
        parse_mode='html',
        reply_markup = await btns.backControl()
    )

@dp.message_handler(state=st.UserChangeRequisites.waitRequisites)
async def setRequisites(message: types.Message, state: FSMContext):
    await state.reset_state()
    await db.updateRequisites(message.from_user.id, message.text)
    await message.answer(
        f'<b>‚òëÔ∏è –í—ã–≤–æ–¥ –Ω–∞ –Ω–æ–º–µ—Ä {message.text} –≤–∫–ª—é—á—ë–Ω!</b>',
        parse_mode='html',
        reply_markup = await btns.backControl()
    )

@dp.callback_query_handler(text='user&addToken', state='*')
async def addNewToken(call: types.CallbackQuery, state: FSMContext):
    await state.reset_state()
    await st.UploadTokens.first()
    await call.message.edit_text(
        '<b>üîë –í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á–∏ (api) —Ç–æ–∫–µ–Ω—ã –∫–∏–≤–∏ –æ—Ç 1 –¥–æ 100 —à—Ç—É–∫:\
        \n\nüìú –í–≤–æ–¥–∏—Ç—å –º–æ–∂–Ω–æ –∫–∞–∂–¥—ã–π —Ç–æ–∫–µ–Ω —Å –Ω–æ–≤–æ–π</b>',
        parse_mode='html',
        reply_markup = await btns.receiveToken()
    )

@dp.message_handler(state=st.UploadTokens.waitTokens)
async def uploadTokens(message: types.Message, state: FSMContext):
    await state.reset_state()
    tokenList = message.text.splitlines()
    checkMessage = await message.answer('<b>‚è≥ –û–∂–∏–¥–∞–π—Ç–µ –∏–¥—ë—Ç –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–æ–≤</b>', parse_mode='html')
    resultCheckTokens = await qiwi.uploadTokens(message.from_user.id, tokenList)
    await checkMessage.edit_text(
        f'<b>‚òëÔ∏è –£—Å–ø–µ—à–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏–ª–∏ —Ç–æ–∫–µ–Ω—ã</b>\
        \n\n<b>üî¥ –ù–µ—Ä–∞–±–æ—á–∏—Ö:</b> <code>{resultCheckTokens[1]}</code>\
        \n<b>üü¢ –†–∞–±–æ—á–∏—Ö:</b> <code>{resultCheckTokens[0]}</code>\
        \n\n<b>üí∞ –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–µ–Ω–µ–≥: </b> <code>{resultCheckTokens[2]}</code> <b>‚ÇΩ</b>',
        parse_mode='html',
        reply_markup = await btns.backControl()
    )

@dp.callback_query_handler(text='user&removeToken', state='*')
async def deleteToken(call: types.CallbackQuery, state: FSMContext):
    await state.reset_state()
    await st.DeleteToken.first()
    await call.message.edit_text(
        '<b>‚ùï –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–æ–∫–µ–Ω –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å</b>',
        parse_mode='html',
        reply_markup = await btns.backControl()
    )

@dp.message_handler(state=st.DeleteToken.waitToken)
async def deleteTokenDb(message: types.Message, state: FSMContext):
    await state.reset_state()
    await db.deleteToken(message.text)
    await message.answer(
        '<b>–¢–æ–∫–µ–Ω —É–¥–∞–ª–µ–Ω!</b>',
        parse_mode='html',
        reply_markup = await btns.backControl()
    )

@dp.callback_query_handler(text='user&reset', state='*')
async def resetUser(call: types.CallbackQuery, state: FSMContext):
    await state.reset_state()
    await db.clearUser(call.from_user.id)
    await call.answer('üí° –í–∞—à –∞–∫–∫–∞—É—Ç —Å–±—Ä–æ—à–µ–Ω')
    await openUserControlPanel(call, state)

@dp.callback_query_handler(text='user&tokens', state='*')
async def downloadTokens(call: types.CallbackQuery, state: FSMContext):
    await state.reset_state()
    file = open(f'data/cache/{call.from_user.id}.txt', 'w')
    strTokens = ''
    tokens = await db.getTokens(call.from_user.id)
    for token in tokens:
        strTokens+=f'{token.token}\n'
    file.write(strTokens)
    file.close()
    try:
        await bot.delete_message(chat_id=call.from_user.id, message_id=call.message.message_id)
        await call.message.answer_document(
            open(f'data/cache/{call.from_user.id}.txt', 'rb'),
            caption = '–í—Å–µ —Ç–æ–∫–µ–Ω—ã',
            reply_markup = await btns.backControl()
        )
    except:
        await call.answer('üí° –£ –≤–∞—Å –Ω–µ—Ç —Ç–æ–∫–µ–Ω–æ–≤')